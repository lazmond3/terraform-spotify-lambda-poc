name: "Terraform"

on:
  push:
    branches:
      - master
  pull_request:

defaults:
  run:
    working-directory: ./terraform/


jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1


      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build with Gradle
        run: |
          cd ../
          ./gradlew :app:build  

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ./terraform

      - name: Terraform Init
        id: init
        run: terraform init

      - name: build python(copy„Åô„Çã„Å†„Åë)
        run: |
          cd ../
          # „Åì„Åì„Åß gradle „Çí„ÇÑ„Çã„ÄÇÔΩå „Åì„Çå run „Åò„ÇÉ„Å™„ÅÑ„Åª„ÅÜ„Åå„ÅÑ„ÅÑ

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -var-file dev.auto.tfvars
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
          PLAN_ERROR: ${{ steps.plan.outputs.stderr }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commitHash = process.env.GITHUB_SHA;
            const commitHashSubstr = commitHash.substr(0,7);
            const errorLine = `${process.env.PLAN_ERROR}`.trimLeft();
            const output = `#### terraform plan every: ${commitHashSubstr}
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`

            </details>

            ${
              process.env.PLAN_ERROR &&
                `<details><summary>Show Plan Error</summary>

                \`\`\`terraform
                ${errorLine}
                \`\`\`

                </details>
            `}


            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
