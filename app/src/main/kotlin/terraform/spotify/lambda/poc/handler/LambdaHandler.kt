package terraform.spotify.lambda.poc.handler

import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder
import com.amazonaws.services.lambda.runtime.Context
import com.amazonaws.services.lambda.runtime.RequestHandler
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent
import com.fasterxml.jackson.databind.ObjectMapper
import retrofit2.Retrofit
import retrofit2.converter.jackson.JacksonConverterFactory
import terraform.spotify.lambda.poc.client.SpotifyApiClient
import terraform.spotify.lambda.poc.controller.LineBotHookController
import terraform.spotify.lambda.poc.mapper.dynamo.UserTokenDynamoDbMapper
import terraform.spotify.lambda.poc.service.SpotifyService
import terraform.spotify.lambda.poc.variables.EnvironmentVariables
import javax.inject.Inject


class LambdaHandler : RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {
    val tableName = "spotify-poc"
    val ddb = AmazonDynamoDBClientBuilder.defaultClient()

    //    val variables = EnvironmentVariables()
    @Inject
    lateinit var variables: EnvironmentVariables
    val baseUrl = "https://accounts.spotify.com"
    val objectMapper = ObjectMapper()
    val lineBotHookController = LineBotHookController(variables.lineBotChannelAccessToken)
    val retrofit = Retrofit.Builder()
        .baseUrl(baseUrl)
        .addConverterFactory(JacksonConverterFactory.create())
        .build()
    val spotifyApiClient = retrofit.create(SpotifyApiClient::class.java)

    val userTokenDynamoDBMapper = UserTokenDynamoDbMapper(
        tableName = tableName,
        dbClient = ddb
    )
    val spotifyService = SpotifyService(
        spotifyApiClient = spotifyApiClient,
        variables = variables,
        userTokenDynamoDbMapper = userTokenDynamoDBMapper
    )

    override fun handleRequest(input: APIGatewayProxyRequestEvent, context: Context): APIGatewayProxyResponseEvent {
        val logger = context.logger

        logger.log("------")
        logger.log("input: $input")
        logger.log("------")

        return if (input.path == "/callback") {
            lineBotHookController.handle(input, context)
        } else if (input.path == "/test") {
            val headers = mapOf(
                "Content-Type" to "text/html"
            )
            APIGatewayProxyResponseEvent().apply {
                isBase64Encoded = false
                statusCode = 200
                setHeaders(headers)
                body = "<!DOCTYPE html><html><head><title>AWS Lambda sample</title></head><body>" +
                        "<h1>Welcome</h1><p>Page generated by a Lambda function.</p>" +
                        "</body></html>"
            }
        } else {
            val headers = mapOf(
                "Content-Type" to "text/html"
            )
            APIGatewayProxyResponseEvent().apply {
                isBase64Encoded = false
                statusCode = 404
                setHeaders(headers)
                body = "<!DOCTYPE html><html><head><title>Error</title></head><body>" +
                        "<h1>No such endpoint.</h1>" +
                        "</body></html>"
            }
        }
    }
}
